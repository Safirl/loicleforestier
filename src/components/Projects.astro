---
import projects from "../data/projects";
---

<div class="projects">
    <div class="projectFilter">
        <button id="filterDev">Dev</button>
        <button id="filterFilms">Films</button>
    </div>
    <ul class="projectsList">
        {
            projects.map((project) => (
                <li
                    class="projectItem"
                    data-category={project.category}
                    data-key={project.id}
                >
                    <a class="primaryLink" href={project.link}>
                        {project.title}
                    </a>
                    {project.secondaryLink && (
                        <a
                            class="secondaryLink"
                            href={project.secondaryLink}
                        >
                            {project.secondaryLinkName}
                        </a>
                    )}
                </li>
            ))
        }
    </ul>
</div>
<div class="projectImage">
    <img id="image" class="projectImage" src={projects[0].image} alt="" />
    <img class="backgroundImage" src={projects[0].image} alt="" />
    <p class="projectDescription">
        {projects[0].description}
    </p>
</div>
<!-- Mouse follower -->
<div id="mouseFollower"></div>
<div id="trail"></div>

<style lang="scss">
    @use "../styles/_variables";

    .container {
        display: flex;
        justify-content: center;
        gap: 180px;
        width: 100%;
        margin: 0px 100px 0px 100px;
    }

    .projects {
        display: flex;
        flex-direction: column;
        gap: variables.$spacing-l;
        width: 200px;
    }

    .projectFilter {
        display: flex;
        gap: variables.$spacing-s;

        button {
            transition: ease-in-out opacity .2s;

            &.hidden {
                opacity: 50%;
            }
        }
    }

    .projectsList {
        display: flex;
        flex-direction: column;
        gap: variables.$spacing-s;

        .projectItem {
            display: flex;
            flex-direction: column;
            // gap: variables.$spacing-s;
            transition: ease-in-out opacity .2s;

            &.hidden {
                opacity: 50%;
                pointer-events: none;
                cursor: none;
            }

                .primaryLink {
                    font-size: variables.$font-size-l;
                    width: fit-content;
                    transition: margin-bottom ease-in-out .5s;
                    margin-bottom: 0px;

                    &.visible {
                        margin-bottom: 1rem
                    }
                }
        
                .secondaryLink {
                    font-size: variables.$font-size-s;
                    transition: opacity ease-in-out .5s;
                    opacity: 0%;
                    width: fit-content;
        
                    &.visible {
                        opacity: 100%;
                    }
                }
        }

    }

    .projectImage {
        display: flex;
        flex-direction: column;
        gap: variables.$spacing-m;
        position: relative;
        width: 60vh;
        max-width: 600px;

        .backgroundImage {
            position: absolute;
            z-index: -1;
            top: 50%;
            left: 50%;
            width: 150%;
            transform: translate(-50%, -50%);
            filter: blur(120px);
        }
    }

    #mouseFollower {
        position: absolute;
        width: 100px;
        height: 100px;
        pointer-events: none;
        background-color: red;
        transform: translate(-50%, -50%);
        transition: all .05s ease-out;
        z-index: -1;
        filter: blur(50px);
        opacity: 50%;
    }
    #trail {
        position: absolute;
    }
</style>

<script>
    import projects from "../data/projects";
    import ColorThief from 'colorthief';
    import {followMouse} from '../js/mouseBlurEffect'

    interface project {
        id: number;
        title: string;
        description: string;
        image: string;
        category: string;
        link: string;
        secondaryLink: string;
        secondaryLinkName: string;
    }
    
    const img = new Image();
    img.src = projects[0].image;
    let isDevFilterActive = false;
    let isMovieFilterActive = false;
    let currentProject: project|undefined;

    document.addEventListener("DOMContentLoaded", () => {
        const filterDev = document.getElementById("filterDev");
        const filterMovie = document.getElementById("filterFilms");
        const projectItems = document.querySelectorAll(".projectItem") as NodeListOf<HTMLLIElement>;
        const projectDescription = document.querySelector(".projectDescription") as HTMLParagraphElement;
        const projectImages = document.querySelectorAll("img")
        if (!filterDev || !filterMovie || !projectItems || !projectDescription) {
            return;
        }

        projectItems.forEach((item) => {
            item.addEventListener("pointerenter", () => {
                const oldItem = Array.from(projectItems).find((item) => item.dataset.key === currentProject?.id.toString())
                if (oldItem) {
                    const oldSecondaryLink = Array.from(oldItem.children).find((child) => 
                        child.classList.contains("secondaryLink")
                    );
                    oldSecondaryLink?.classList.remove("visible")
                    const oldPrimaryLink = Array.from(oldItem.children).find((child) => 
                        child.classList.contains("primaryLink")
                    );
                    if (oldPrimaryLink) {
                        oldPrimaryLink.classList.remove("visible")
                    }
                }

                currentProject = projects.find((project) => project.id.toString() === item.dataset.key)
                if (!currentProject) {
                    return;   
                }
                img.src = currentProject.image;
                projectImages.forEach((img) => {
                    img.src = (currentProject as project).image;
                })
                projectDescription.innerHTML = currentProject.description;
                const secondaryLink = Array.from(item.children).find((child) => 
                    child.classList.contains("secondaryLink")
                );
                if (secondaryLink) {
                    secondaryLink.classList.add("visible")
                }
                const primaryLink = Array.from(item.children).find((child) => 
                    child.classList.contains("primaryLink")
                );
                if (primaryLink) {
                    primaryLink.classList.add("visible")
                }
            })
        })

        //Filter for web projects
        filterDev.addEventListener("click", () => {
            isDevFilterActive = !isDevFilterActive
            if (isDevFilterActive) {
                isMovieFilterActive = !isDevFilterActive
            }
            updateActiveItems()
        });

        //Filter for movie projects
        filterMovie.addEventListener("click", () => {
            isMovieFilterActive = !isMovieFilterActive
            if (isMovieFilterActive) {
                isDevFilterActive = !isMovieFilterActive
            }
            updateActiveItems()
        });

        function updateActiveItems() {
            projectItems.forEach((item) => {
                if (item.dataset.category === "web") {
                    if (isMovieFilterActive) {
                        filterDev?.classList.add("hidden")
                        item.classList.add("hidden")
                    } else {
                        filterDev?.classList.remove("hidden")
                        item.classList.remove("hidden")
                    } 
                } else if (item.dataset.category === "movie") {
                    if (isDevFilterActive) {
                        filterMovie?.classList.add("hidden")
                        item.classList.add("hidden")
                    } else {
                        filterMovie?.classList.remove("hidden")
                        item.classList.remove("hidden")
                    }
                }
            });
        }
        if (!img) {
            return;
        }
        //Change background color with image dominent color
        img.addEventListener('load', () => {
            const colorThief = new ColorThief();
            const dominantColor = colorThief.getColor(img);
            const darkenFactor = .1
            const rgbColor = `rgb(${dominantColor[0]*darkenFactor}, ${dominantColor[1]*darkenFactor}, ${dominantColor[2]*darkenFactor})`
            document.body.style.backgroundColor = rgbColor;
        });
        //MouseFollower
        followMouse(img);
    });
    

</script>
